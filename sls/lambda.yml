Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-${self:provider.stage}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - arn:aws:s3:::${self:custom.inputBucket}/*
                  - arn:aws:s3:::${self:custom.outputBucket}/*
                  - arn:aws:s3:::${self:service}-${self:provider.stage}-deployment/*
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ProcessingQueue.Arn

Functions:
  processJson:
    handler: functions/process_json/handler.process
    name: ${self:service}-${self:provider.stage}-process-json
    environment:
      INPUT_BUCKET: ${self:custom.inputBucket}
      OUTPUT_BUCKET: ${self:custom.outputBucket}
      STAGE: ${file(config/${opt:stage, 'dev'}.yml):STAGE}
      REGION: ${file(config/${opt:stage, 'dev'}.yml):REGION}
    timeout: 60
    memorySize: 128
    role: !GetAtt LambdaExecutionRole.Arn
    events:
      - sqs:
          arn: !GetAtt ProcessingQueue.Arn
          batchSize: 10
